#!/bin/bash
# run_once_after_setup-macos.sh
# Comprehensive macOS setup script
# This script runs once after chezmoi applies dotfiles
# It can also be run manually anytime to sync packages: chezmoi cd && bash run_once_after_setup-macos.sh.tmpl

{{- if eq .chezmoi.os "darwin" }}

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo ""
echo -e "${BOLD}${BLUE}╔════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${BLUE}║     macOS Setup - Homebrew & Packages      ║${NC}"
echo -e "${BOLD}${BLUE}╔════════════════════════════════════════════╗${NC}"
echo ""

# ============================================================================
# Step 1: Install Homebrew
# ============================================================================

echo -e "${BLUE}[1/4] Checking Homebrew installation...${NC}"
if ! command -v brew &> /dev/null; then
    echo -e "${YELLOW}📦 Homebrew not found. Installing Homebrew...${NC}"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH for Apple Silicon Macs
    if [[ $(uname -m) == "arm64" ]]; then
        echo -e "${BLUE}🔧 Adding Homebrew to PATH for Apple Silicon...${NC}"
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    echo -e "${GREEN}✅ Homebrew installed successfully!${NC}"
else
    echo -e "${GREEN}✅ Homebrew is already installed${NC}"
    # Update Homebrew
    echo -e "${BLUE}🔄 Updating Homebrew...${NC}"
    brew update
fi

echo ""

# ============================================================================
# Step 2: Ensure homebrew-bundle is available
# ============================================================================

echo -e "${BLUE}[2/4] Checking Homebrew Bundle...${NC}"
if ! brew tap | grep -q "homebrew/bundle"; then
    echo -e "${YELLOW}📦 Installing homebrew-bundle...${NC}"
    brew tap homebrew/bundle
fi
echo -e "${GREEN}✅ Homebrew Bundle ready${NC}"
echo ""

# ============================================================================
# Step 3: Check for Brewfile(s)
# ============================================================================

echo -e "${BLUE}[3/4] Checking for Brewfile(s)...${NC}"
BREWFILE="$HOME/Brewfile"
BREWFILE_WORK="$HOME/.Brewfile.work"

if [[ ! -f "$BREWFILE" ]]; then
    echo -e "${RED}❌ Brewfile not found at $BREWFILE${NC}"
    echo -e "${YELLOW}Run 'chezmoi apply' first to create the Brewfile${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Found Brewfile at $BREWFILE${NC}"

# Check for work-specific Brewfile
HAS_WORK_BREWFILE=false
if [[ -f "$BREWFILE_WORK" ]]; then
    echo -e "${GREEN}✅ Found work Brewfile at $BREWFILE_WORK${NC}"
    HAS_WORK_BREWFILE=true
else
    echo -e "${BLUE}ℹ️  No work Brewfile found (optional)${NC}"
    echo -e "${BLUE}   To add work-specific packages, create ~/.Brewfile.work${NC}"
fi
echo ""

# Show summary for personal Brewfile
echo -e "${BLUE}📋 Personal Brewfile Summary:${NC}"
TAPS=$(grep -c '^tap ' "$BREWFILE" || echo 0)
FORMULAE=$(grep -c '^brew ' "$BREWFILE" || echo 0)
CASKS=$(grep -c '^cask ' "$BREWFILE" || echo 0)
MAS=$(grep -c '^mas ' "$BREWFILE" || echo 0)

echo "   Taps:         $TAPS"
echo "   Formulae:     $FORMULAE"
echo "   Casks:        $CASKS"
echo "   Mac Apps:     $MAS"
echo "   ─────────────────"
echo "   Total:        $((TAPS + FORMULAE + CASKS + MAS)) packages"

# Show summary for work Brewfile if it exists
if [[ "$HAS_WORK_BREWFILE" == true ]]; then
    echo ""
    echo -e "${BLUE}📋 Work Brewfile Summary:${NC}"
    WORK_TAPS=$(grep -c '^tap ' "$BREWFILE_WORK" || echo 0)
    WORK_FORMULAE=$(grep -c '^brew ' "$BREWFILE_WORK" || echo 0)
    WORK_CASKS=$(grep -c '^cask ' "$BREWFILE_WORK" || echo 0)
    WORK_MAS=$(grep -c '^mas ' "$BREWFILE_WORK" || echo 0)

    echo "   Taps:         $WORK_TAPS"
    echo "   Formulae:     $WORK_FORMULAE"
    echo "   Casks:        $WORK_CASKS"
    echo "   Mac Apps:     $WORK_MAS"
    echo "   ─────────────────"
    echo "   Total:        $((WORK_TAPS + WORK_FORMULAE + WORK_CASKS + WORK_MAS)) packages"
fi
echo ""

# ============================================================================
# Step 4: Install packages from Brewfile(s)
# ============================================================================

echo -e "${BLUE}[4/4] Installing packages from Brewfile(s)...${NC}"
echo ""
if [[ "$HAS_WORK_BREWFILE" == true ]]; then
    echo -e "${YELLOW}⚠️  This will install/update packages from both personal and work Brewfiles${NC}"
else
    echo -e "${YELLOW}⚠️  This will install/update all packages from the Brewfile${NC}"
fi
echo -e "${YELLOW}   This may take 10-30 minutes depending on what's already installed${NC}"
echo ""

# Check if running interactively
if [[ -t 0 ]]; then
    read -p "Do you want to continue? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}⏭️  Skipping package installation${NC}"
        echo ""
        echo -e "${BLUE}💡 To install packages later, run:${NC}"
        echo "   brew bundle --global"
        if [[ "$HAS_WORK_BREWFILE" == true ]]; then
            echo "   brew bundle --file ~/.Brewfile.work"
        fi
        exit 0
    fi
fi

echo ""
echo -e "${BLUE}📦 Installing/updating packages from personal Brewfile...${NC}"
echo ""

# Install packages from personal Brewfile
if brew bundle --file="$BREWFILE" --no-lock; then
    echo ""
    echo -e "${GREEN}✅ Personal packages installation complete!${NC}"
else
    echo ""
    echo -e "${YELLOW}⚠️  Some personal packages may have failed to install${NC}"
    echo -e "${BLUE}💡 This is usually okay - check the output above for details${NC}"
fi

# Install packages from work Brewfile if it exists
if [[ "$HAS_WORK_BREWFILE" == true ]]; then
    echo ""
    echo -e "${BLUE}📦 Installing/updating packages from work Brewfile...${NC}"
    echo ""

    if brew bundle --file="$BREWFILE_WORK" --no-lock; then
        echo ""
        echo -e "${GREEN}✅ Work packages installation complete!${NC}"
    else
        echo ""
        echo -e "${YELLOW}⚠️  Some work packages may have failed to install${NC}"
        echo -e "${BLUE}💡 This is usually okay - check the output above for details${NC}"
    fi
fi

echo ""

# ============================================================================
# Cleanup (optional)
# ============================================================================

# Check if running interactively
if [[ -t 0 ]]; then
    echo -e "${BLUE}🧹 Cleanup${NC}"
    read -p "Do you want to cleanup old package versions? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}🧹 Cleaning up old versions...${NC}"
        brew cleanup
        echo -e "${GREEN}✅ Cleanup complete!${NC}"
    else
        echo -e "${YELLOW}⏭️  Skipping cleanup${NC}"
    fi
fi

# ============================================================================
# Done!
# ============================================================================

echo ""
echo -e "${BOLD}${GREEN}╔════════════════════════════════════════════╗${NC}"
echo -e "${BOLD}${GREEN}║          Setup Complete! 🎉                ║${NC}"
echo -e "${BOLD}${GREEN}╚════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${BLUE}💡 Useful commands:${NC}"
echo ""
echo -e "  ${BOLD}Sync personal packages:${NC}"
echo "    brew bundle --global"
echo ""
if [[ "$HAS_WORK_BREWFILE" == true ]]; then
    echo -e "  ${BOLD}Sync work packages:${NC}"
    echo "    brew bundle --file ~/.Brewfile.work"
    echo ""
fi
echo -e "  ${BOLD}Update personal Brewfile after installing new packages:${NC}"
echo "    brew bundle dump --force --global"
echo ""
if [[ "$HAS_WORK_BREWFILE" == true ]]; then
    echo -e "  ${BOLD}Update work Brewfile:${NC}"
    echo "    brew bundle dump --force --file ~/.Brewfile.work"
    echo ""
fi
echo -e "  ${BOLD}Find packages not in Brewfiles:${NC}"
echo "    brew bundle cleanup --global"
echo ""
echo -e "  ${BOLD}Remove packages not in Brewfiles:${NC}"
echo "    brew bundle cleanup --force --global"
echo ""
echo -e "  ${BOLD}Re-run this setup:${NC}"
echo "    cd \$(chezmoi source-path) && bash run_once_after_setup-macos.sh.tmpl"
echo ""

{{- else }}
echo "⏭️  Skipping macOS setup (not running on macOS)"
{{- end }}
